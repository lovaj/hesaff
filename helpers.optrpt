Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -I /opt/intel/advisor_2017.1.1.486553/include/ -I/home/luca/ParallelOpenCV/include -O3 -g -qopt-report=5 -simd -Bdynamic -parallel -qopenmp -parallel-source-info=2 -ldl -qopenmp-link dynamic -debug inline-debug-info -shared-intel -xCORE-AVX2 -Wall -std=c++11 -c -o helpers.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: getTime()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (getTime()) [1/43=2.3%] helpers.cpp(29,1)
  -> EXTERN: (32,9) clock_gettime(clockid_t, timespec *)
  -> EXTERN: (40,7) gettimeofday(timeval *, timezone *)


    Report from: Code generation optimizations [cg]

helpers.cpp(29,1):remark #34051: REGISTER ALLOCATION : [_Z7getTimev] helpers.cpp:29

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rsi rdi zmm0-zmm2]
        
    Routine temporaries
        Total         :      24
            Global    :       8
            Local     :      16
        Regenerable   :       6
        Spilled       :       0
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [2.00e+00 ~ 8.1%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: solveLinear3x3(float *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (solveLinear3x3(float *, float *)) [2/43=4.7%] helpers.cpp(52,1)
  -> INLINE (MANUAL): (56,15) std::abs(float) (isz = 0) (sz = 7)
  -> INLINE (MANUAL): (57,16) std::abs(float) (isz = 0) (sz = 7)
  -> INLINE (MANUAL): (65,8) std::abs(float) (isz = 0) (sz = 7)
  -> INLINE (MANUAL): (73,19) swap<float>(float *, float *) (isz = 4) (sz = 11)
  -> INLINE (MANUAL): (73,32) swap<float>(float *, float *) (isz = 4) (sz = 11)
  -> INLINE (MANUAL): (73,49) swap<float>(float *, float *) (isz = 4) (sz = 11)
  -> INLINE (MANUAL): (73,66) swap<float>(float *, float *) (isz = 4) (sz = 11)
  -> INLINE (MANUAL): (82,8) std::abs(float) (isz = 0) (sz = 7)
  -> INLINE (MANUAL): (82,20) std::abs(float) (isz = 0) (sz = 7)
  -> INLINE (MANUAL): (82,33) swap<float>(float *, float *) (isz = 4) (sz = 11)
  -> INLINE (MANUAL): (82,49) swap<float>(float *, float *) (isz = 4) (sz = 11)
  -> INLINE (MANUAL): (82,65) swap<float>(float *, float *) (isz = 4) (sz = 11)


    Report from: Code generation optimizations [cg]

helpers.cpp(52,1):remark #34051: REGISTER ALLOCATION : [_Z14solveLinear3x3PfS_] helpers.cpp:52

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm10]
        
    Routine temporaries
        Total         :      71
            Global    :      16
            Local     :      55
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: swap<float>(float *, float *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (swap<float>(float *, float *)) helpers.cpp(47,1)

===========================================================================

Begin optimization report for: rectifyAffineTransformationUpIsUp(float &, float &, float &, float &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (rectifyAffineTransformationUpIsUp(float &, float &, float &, float &)) [4/43=9.3%] helpers.cpp(96,1)
  -> INLINE (MANUAL): (98,22) std::abs(double) (isz = 0) (sz = 7)


    Report from: Code generation optimizations [cg]

helpers.cpp(96,1):remark #34051: REGISTER ALLOCATION : [_Z33rectifyAffineTransformationUpIsUpRfS_S_S_] helpers.cpp:96

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rdx rcx rsi rdi zmm0-zmm11]
        
    Routine temporaries
        Total         :      34
            Global    :       0
            Local     :      34
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: rectifyAffineTransformationUpIsUp(float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (rectifyAffineTransformationUpIsUp(float *)) [5/43=11.6%] helpers.cpp(105,1)
  -> INLINE: (106,4) rectifyAffineTransformationUpIsUp(float &, float &, float &, float &) (isz = 40) (sz = 51)
    -> INLINE (MANUAL): (98,22) std::abs(double) (isz = 0) (sz = 7)


    Report from: Code generation optimizations [cg]

helpers.cpp(105,1):remark #34051: REGISTER ALLOCATION : [_Z33rectifyAffineTransformationUpIsUpPf] helpers.cpp:105

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rdi zmm0-zmm11]
        
    Routine temporaries
        Total         :      28
            Global    :       0
            Local     :      28
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: computeGaussMask(cv::Mat &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (computeGaussMask(cv::Mat &)) [6/43=14.0%] helpers.cpp(110,1)
  -> EXTERN: (117,36) operator new[](std::size_t)
  -> EXTERN: (117,36) __cxa_throw_bad_array_new_length()
  -> INLINE (MANUAL): (119,16) std::exp(float) (isz = 1) (sz = 8)
    -> EXTERN: /usr/include/c++/5/cmath:(242,12) __builtin_expf(float)
  -> INLINE (MANUAL): (121,22) std::ceil(float) (isz = 1) (sz = 8)
    -> EXTERN: /usr/include/c++/5/cmath:(185,12) __builtin_ceilf(float)
  -> INLINE (MANUAL): (123,26) std::exp(float) (isz = 1) (sz = 8)
    -> EXTERN: /usr/include/c++/5/cmath:(242,12) __builtin_expf(float)
  -> INLINE (MANUAL): (128,15) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (129,18) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (130,18) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (131,18) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> EXTERN: (133,4) operator delete[](void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at helpers.cpp(118,4)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at helpers.cpp(118,4)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference tmp[i] has unaligned access   [ helpers.cpp(119,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.125
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 134 
   remark #15477: vector cost: 14.000 
   remark #15478: estimated potential speedup: 7.110 
   remark #15482: vectorized math library calls: 1 
   remark #15486: divides: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at helpers.cpp(118,4)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at helpers.cpp(122,4)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp[halfSize-i]>, stride is -1   [ helpers.cpp(123,7) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp[halfSize-i]>, stride is -1   [ helpers.cpp(123,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.027
   remark #15300: LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 139 
   remark #15477: vector cost: 18.620 
   remark #15478: estimated potential speedup: 6.860 
   remark #15482: vectorized math library calls: 1 
   remark #15486: divides: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at helpers.cpp(122,4)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at helpers.cpp(125,4)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between (mask->data+*mask->p*(i+halfSize))[j+halfSize] (131:18) and (mask->data+*mask->p*(i+halfSize))[j+halfSize] (128:15)
   remark #17106: parallel dependence: assumed OUTPUT dependence between (mask->data+*mask->p*(i+halfSize))[j+halfSize] (128:15) and (mask->data+*mask->p*(i+halfSize))[j+halfSize] (131:18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between (mask->data+*mask->p*(i+halfSize))[j+halfSize] (131:18) and (mask->data+*mask->p*(i+halfSize))[j+halfSize] (128:15)
   remark #15346: vector dependence: assumed OUTPUT dependence between (mask->data+*mask->p*(i+halfSize))[j+halfSize] (128:15) and (mask->data+*mask->p*(i+halfSize))[j+halfSize] (131:18)

   LOOP BEGIN at helpers.cpp(126,7)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between (mask->data+*mask->p*(i+halfSize))[j+halfSize] (131:18) and (mask->data+*mask->p*(i+halfSize))[j+halfSize] (128:15)
      remark #17106: parallel dependence: assumed OUTPUT dependence between (mask->data+*mask->p*(i+halfSize))[j+halfSize] (128:15) and (mask->data+*mask->p*(i+halfSize))[j+halfSize] (131:18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between (mask->data+*mask->p*(i+halfSize))[j+halfSize] (131:18) and (mask->data+*mask->p*(i+halfSize))[j+halfSize] (128:15)
      remark #15346: vector dependence: assumed OUTPUT dependence between (mask->data+*mask->p*(i+halfSize))[j+halfSize] (128:15) and (mask->data+*mask->p*(i+halfSize))[j+halfSize] (131:18)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at helpers.cpp(126,7)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

helpers.cpp(110,1):remark #34051: REGISTER ALLOCATION : [_Z16computeGaussMaskRN2cv3MatE] helpers.cpp:110

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3 zmm8-zmm11]
        
    Routine temporaries
        Total         :     169
            Global    :      58
            Local     :     111
        Regenerable   :       7
        Spilled       :      11
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :      19 [1.55e+01 ~ 1.6%]
            Writes    :      13 [1.20e+01 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: computeCircularGaussMask(cv::Mat &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (computeCircularGaussMask(cv::Mat &)) [7/43=16.3%] helpers.cpp(137,1)
  -> INLINE (MANUAL): (145,21) cv::Mat::ptr<float>(cv::Mat *, int) (isz = 3) (sz = 11)
  -> INLINE (MANUAL): (150,32) std::exp(float) (isz = 1) (sz = 8)
    -> EXTERN: /usr/include/c++/5/cmath:(242,12) __builtin_expf(float)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at helpers.cpp(146,4)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between *mp (150:11) and *mp (150:11)
   remark #17106: parallel dependence: assumed OUTPUT dependence between *mp (150:11) and *mp (150:11)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at helpers.cpp(147,7)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at helpers.cpp(147,7)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between mp (150:11) and mp (150:11)
      remark #17106: parallel dependence: assumed FLOW dependence between mp (150:11) and mp (150:11)
      remark #17106: parallel dependence: assumed ANTI dependence between mp (150:11) and mp (150:11)
      remark #15389: vectorization support: reference *mp has unaligned access   [ helpers.cpp(150,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.157
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 58 
      remark #15477: vector cost: 17.500 
      remark #15478: estimated potential speedup: 3.020 
      remark #15482: vectorized math library calls: 1 
      remark #15486: divides: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at helpers.cpp(147,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

helpers.cpp(137,1):remark #34051: REGISTER ALLOCATION : [_Z24computeCircularGaussMaskRN2cv3MatE] helpers.cpp:137

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   28[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5 zmm8-zmm15]
        
    Routine temporaries
        Total         :      88
            Global    :      41
            Local     :      47
        Regenerable   :       5
        Spilled       :      12
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      96 bytes*
            Reads     :      17 [5.85e+01 ~ 3.5%]
            Writes    :      17 [4.05e+01 ~ 2.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: invSqrt(float &, float &, float &, float &, float &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (invSqrt(float &, float &, float &, float &, float &)) [8/43=18.6%] helpers.cpp(155,1)


    Report from: Code generation optimizations [cg]

helpers.cpp(155,1):remark #34051: REGISTER ALLOCATION : [_Z7invSqrtRfS_S_S_S_] helpers.cpp:155

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rdx rcx rsi rdi r8 zmm0-zmm13]
        
    Routine temporaries
        Total         :      72
            Global    :      24
            Local     :      48
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: getEigenvalues(float, float, float, float, float &, float &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (getEigenvalues(float, float, float, float, float &, float &)) [9/43=20.9%] helpers.cpp(183,1)
  -> INLINE (MANUAL): (188,18) std::sqrt(float) (isz = 0) (sz = 7)


    Report from: Code generation optimizations [cg]

helpers.cpp(183,1):remark #34051: REGISTER ALLOCATION : [_Z14getEigenvaluesffffRfS_] helpers.cpp:183

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rsi rdi zmm0-zmm7]
        
    Routine temporaries
        Total         :      32
            Global    :      11
            Local     :      21
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: interpolateCheckBorders(const cv::Mat &, float, float, float, float, float, float, const cv::Mat &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (interpolateCheckBorders(const cv::Mat &, float, float, float, float, float, float, const cv::Mat &)) [10/43=23.3%] helpers.cpp(197,1)
  -> INLINE (MANUAL): (208,11) std::floor(float) (isz = 1) (sz = 8)
    -> EXTERN: /usr/include/c++/5/cmath:(280,12) __builtin_floorf(float)
  -> INLINE (MANUAL): (208,30) std::floor(float) (isz = 1) (sz = 8)
    -> EXTERN: /usr/include/c++/5/cmath:(280,12) __builtin_floorf(float)
  -> INLINE (MANUAL): (208,49) std::ceil(float) (isz = 1) (sz = 8)
    -> EXTERN: /usr/include/c++/5/cmath:(185,12) __builtin_ceilf(float)
  -> INLINE (MANUAL): (208,71) std::ceil(float) (isz = 1) (sz = 8)
    -> EXTERN: /usr/include/c++/5/cmath:(185,12) __builtin_ceilf(float)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at helpers.cpp(204,4)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   remark #17102: loop was not parallelized: not a parallelization candidate
LOOP END

    Report from: Code generation optimizations [cg]

helpers.cpp(197,1):remark #34051: REGISTER ALLOCATION : [_Z23interpolateCheckBordersRKN2cv3MatEffffffS2_] helpers.cpp:197

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rsi rdi r8-r10 zmm0-zmm12]
        
    Routine temporaries
        Total         :      52
            Global    :      18
            Local     :      34
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       2 [2.89e+00 ~ 3.3%]
            Writes    :       8 [8.00e+00 ~ 9.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: interpolateBool(const cv::Mat &, float, float, float, float, float, float, cv::Mat &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (interpolateBool(const cv::Mat &, float, float, float, float, float, float, cv::Mat &)) [11/43=25.6%] helpers.cpp(215,1)
  -> INLINE (MANUAL): (223,21) cv::Mat::ptr<float>(cv::Mat *, int) (isz = 3) (sz = 11)
  -> INLINE (MANUAL): (233,30) std::floor(float) (isz = 1) (sz = 8)
    -> EXTERN: /usr/include/c++/5/cmath:(280,12) __builtin_floorf(float)
  -> INLINE (MANUAL): (234,30) std::floor(float) (isz = 1) (sz = 8)
    -> EXTERN: /usr/include/c++/5/cmath:(280,12) __builtin_floorf(float)
  -> INLINE (MANUAL): (241,48) cv::Mat::at<float>(const cv::Mat *, int, int) const (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (241,75) cv::Mat::at<float>(const cv::Mat *, int, int) const (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (242,48) cv::Mat::at<float>(const cv::Mat *, int, int) const (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (242,75) cv::Mat::at<float>(const cv::Mat *, int, int) const (isz = 4) (sz = 14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at helpers.cpp(224,4)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between *out (240:14) and *out (244:14)
   remark #17106: parallel dependence: assumed OUTPUT dependence between *out (244:14) and *out (240:14)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at helpers.cpp(229,7)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between *out (240:14) and *out (244:14)
      remark #17106: parallel dependence: assumed OUTPUT dependence between *out (244:14) and *out (240:14)
      remark #15520: simd loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ helpers.cpp(229,45) ]
      remark #15552: loop was not vectorized with "simd"
   LOOP END

   LOOP BEGIN at helpers.cpp(229,7)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between *out (240:14) and *out (244:14)
      remark #17106: parallel dependence: assumed OUTPUT dependence between *out (244:14) and *out (240:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between *out (240:14) and *out (244:14)
      remark #15346: vector dependence: assumed OUTPUT dependence between *out (244:14) and *out (240:14)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

helpers.cpp(215,1):remark #34051: REGISTER ALLOCATION : [_Z15interpolateBoolRKN2cv3MatEffffffRS0_] helpers.cpp:215

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :      99
            Global    :      42
            Local     :      57
        Regenerable   :       3
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       9 [9.00e+00 ~ 1.1%]
            Writes    :      11 [2.25e+01 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: interpolate(const cv::Mat &, float, float, float, float, float, float, cv::Mat &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (interpolate(const cv::Mat &, float, float, float, float, float, float, cv::Mat &)) [12/43=27.9%] helpers.cpp(253,1)
  -> INLINE (MANUAL): (262,21) cv::Mat::ptr<float>(cv::Mat *, int) (isz = 3) (sz = 11)
  -> INLINE (MANUAL): (289,30) std::floor(float) (isz = 1) (sz = 8)
    -> EXTERN: /usr/include/c++/5/cmath:(280,12) __builtin_floorf(float)
  -> INLINE (MANUAL): (290,30) std::floor(float) (isz = 1) (sz = 8)
    -> EXTERN: /usr/include/c++/5/cmath:(280,12) __builtin_floorf(float)
  -> INLINE (MANUAL): (297,48) cv::Mat::at<float>(const cv::Mat *, int, int) const (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (297,75) cv::Mat::at<float>(const cv::Mat *, int, int) const (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (298,48) cv::Mat::at<float>(const cv::Mat *, int, int) const (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (298,75) cv::Mat::at<float>(const cv::Mat *, int, int) const (isz = 4) (sz = 14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at helpers.cpp(281,4)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between *out (296:14) and *out (300:14)
   remark #17106: parallel dependence: assumed OUTPUT dependence between *out (300:14) and *out (296:14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between *out (296:14) and *out (300:14)
   remark #15346: vector dependence: assumed OUTPUT dependence between *out (300:14) and *out (296:14)

   LOOP BEGIN at helpers.cpp(283,7)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between *out (296:14) and *out (300:14)
      remark #17106: parallel dependence: assumed OUTPUT dependence between *out (300:14) and *out (296:14)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ helpers.cpp(283,45) ]
   LOOP END

   LOOP BEGIN at helpers.cpp(283,7)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between *out (296:14) and *out (300:14)
      remark #17106: parallel dependence: assumed OUTPUT dependence between *out (300:14) and *out (296:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between *out (296:14) and *out (300:14)
      remark #15346: vector dependence: assumed OUTPUT dependence between *out (300:14) and *out (296:14)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

helpers.cpp(253,1):remark #34051: REGISTER ALLOCATION : [_Z11interpolateRKN2cv3MatEffffffRS0_] helpers.cpp:253

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :      99
            Global    :      42
            Local     :      57
        Regenerable   :       2
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [4.50e+00 ~ 0.6%]
            Writes    :       6 [4.50e+00 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: photometricallyNormalize(cv::Mat &, const cv::Mat &, float &, float &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (photometricallyNormalize(cv::Mat &, const cv::Mat &, float &, float &)) [13/43=30.2%] helpers.cpp(309,1)
  -> INLINE (MANUAL): (317,25) cv::Mat::at<float>(const cv::Mat *, int, int) const (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (319,26) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (327,25) cv::Mat::at<float>(const cv::Mat *, int, int) const (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (328,33) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (328,62) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (339,16) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (339,52) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (340,20) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (340,48) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (341,20) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (341,48) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at helpers.cpp(315,4)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between *sum (319:13) and *sum (319:13)
   remark #17106: parallel dependence: assumed OUTPUT dependence between *sum (319:13) and *sum (319:13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between *sum (319:13) and *sum (319:13)
   remark #15346: vector dependence: assumed OUTPUT dependence between *sum (319:13) and *sum (319:13)

   LOOP BEGIN at helpers.cpp(316,7)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between *sum (319:13) and *sum (319:13)
      remark #17106: parallel dependence: assumed FLOW dependence between *sum (319:13) and *sum (319:13)
      remark #17106: parallel dependence: assumed ANTI dependence between *sum (319:13) and *sum (319:13)
      remark #17106: parallel dependence: assumed OUTPUT dependence between *sum (319:13) and *sum (319:13)
      remark #17106: parallel dependence: assumed OUTPUT dependence between *sum (319:13) and *sum (319:13)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between *sum (319:13) and *sum (319:13)
      remark #15346: vector dependence: assumed FLOW dependence between *sum (319:13) and *sum (319:13)
      remark #15346: vector dependence: assumed ANTI dependence between *sum (319:13) and *sum (319:13)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at helpers.cpp(316,7)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at helpers.cpp(325,4)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between *sum (328:13) and *var (328:13)
   remark #17106: parallel dependence: assumed FLOW dependence between *var (328:13) and *sum (328:13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between *sum (328:13) and *var (328:13)
   remark #15346: vector dependence: assumed FLOW dependence between *var (328:13) and *sum (328:13)

   LOOP BEGIN at helpers.cpp(326,7)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between *sum (328:13) and *var (328:13)
      remark #17106: parallel dependence: assumed FLOW dependence between *var (328:13) and *sum (328:13)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between *sum (328:13) and *var (328:13)
      remark #15346: vector dependence: assumed FLOW dependence between *var (328:13) and *sum (328:13)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at helpers.cpp(326,7)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at helpers.cpp(336,4)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between (image->data+*image->p*j)[i] (339:16) and (image->data+*image->p*j)[i] (341:10)
   remark #17106: parallel dependence: assumed OUTPUT dependence between (image->data+*image->p*j)[i] (341:10) and (image->data+*image->p*j)[i] (339:16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at helpers.cpp(337,7)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at helpers.cpp(337,7)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference (image->data+*image->p*j)[i] has aligned access   [ helpers.cpp(339,16) ]
      remark #15388: vectorization support: reference (image->data+*image->p*j)[i] has aligned access   [ helpers.cpp(339,52) ]
      remark #15388: vectorization support: reference (image->data+*image->p*j)[i] has aligned access   [ helpers.cpp(340,48) ]
      remark #15388: vectorization support: reference (image->data+*image->p*j)[i] has aligned access   [ helpers.cpp(340,20) ]
      remark #15388: vectorization support: reference (image->data+*image->p*j)[i] has aligned access   [ helpers.cpp(341,48) ]
      remark #15388: vectorization support: reference (image->data+*image->p*j)[i] has aligned access   [ helpers.cpp(341,20) ]
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.368
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 30 
      remark #15477: vector cost: 2.370 
      remark #15478: estimated potential speedup: 8.500 
      remark #15488: --- end vector cost summary ---
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 8
   LOOP END

   LOOP BEGIN at helpers.cpp(337,7)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference (image->data+*image->p*j)[i] has unaligned access   [ helpers.cpp(339,16) ]
      remark #15389: vectorization support: reference (image->data+*image->p*j)[i] has unaligned access   [ helpers.cpp(339,52) ]
      remark #15389: vectorization support: reference (image->data+*image->p*j)[i] has unaligned access   [ helpers.cpp(340,48) ]
      remark #15389: vectorization support: reference (image->data+*image->p*j)[i] has unaligned access   [ helpers.cpp(340,20) ]
      remark #15389: vectorization support: reference (image->data+*image->p*j)[i] has unaligned access   [ helpers.cpp(341,48) ]
      remark #15389: vectorization support: reference (image->data+*image->p*j)[i] has unaligned access   [ helpers.cpp(341,20) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.800
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
   LOOP END

   LOOP BEGIN at helpers.cpp(337,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

helpers.cpp(309,1):remark #34051: REGISTER ALLOCATION : [_Z24photometricallyNormalizeRN2cv3MatERKS0_RfS4_] helpers.cpp:309

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     166
            Global    :      71
            Local     :      95
        Regenerable   :      17
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       7 [8.13e+00 ~ 0.5%]
            Writes    :       2 [1.90e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: cv::Mat::~Mat(cv::Mat *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (cv::Mat::~Mat(cv::Mat *)) [14/43=32.6%] /usr/local/include/opencv2/core/mat.inl.hpp(589,1)
  -> EXTERN: (589,1) __cxa_call_unexpected
  -> INLINE (MANUAL): (590,5) cv::Mat::release(cv::Mat *) (isz = 47) (sz = 52)
    -> EXTERN: (703,14) __atomic_fetch_add_4(volatile void *, unsigned int, int)
    -> EXTERN: (704,9) cv::Mat::deallocate(cv::Mat *)
  -> EXTERN: (592,9) cv::fastFree(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/local/include/opencv2/core/mat.inl.hpp(707,5) inlined into /usr/local/include/opencv2/core/mat.inl.hpp(591,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/usr/local/include/opencv2/core/mat.inl.hpp(589,1):remark #34051: REGISTER ALLOCATION : [_ZN2cv3MatD1Ev] /usr/local/include/opencv2/core/mat.inl.hpp:589

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi r14]
        
    Routine temporaries
        Total         :      32
            Global    :      14
            Local     :      18
        Regenerable   :       3
        Spilled       :       1
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: gaussianBlur(cv::Mat *, const cv::Mat *, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (gaussianBlur(cv::Mat *, const cv::Mat *, float)) [15/43=34.9%] helpers.cpp(346,1)
  -> (347,42) cv::Mat::~Mat(cv::Mat *) (isz = 60) (sz = 65)
     [[ Unable to inline callsite  <1>]]
  -> INLINE (MANUAL): (347,42) cv::Mat::Mat(cv::Mat *, int, int, int) (isz = 69) (sz = 80)
    -> INLINE (MANUAL): /usr/local/include/opencv2/core/mat.inl.hpp:(339,6) cv::MatStep::MatStep(cv::MatStep *) (isz = 10) (sz = 15)
    -> INLINE (MANUAL): /usr/local/include/opencv2/core/mat.inl.hpp:(341,47) cv::MatSize::MatSize(cv::MatSize *, int *) (isz = 0) (sz = 6)
    -> INLINE (MANUAL): /usr/local/include/opencv2/core/mat.inl.hpp:(343,5) cv::Mat::create(cv::Mat *, int, int, int) (isz = 28) (sz = 40)
      -> INLINE (MANUAL): (681,56) cv::Mat::type(const cv::Mat *) const (isz = 1) (sz = 7)
      -> EXTERN: (684,5) cv::Mat::create(cv::Mat *, int, const int *, int)
  -> INLINE (MANUAL): (347,42) cv::Mat::type(const cv::Mat *) const (isz = 1) (sz = 7)
  -> EXTERN: (349,4) cv::GaussianBlur(cv::InputArray, cv::OutputArray, cv::Size *, double, double, int)
  -> INLINE (MANUAL): (349,17) cv::_OutputArray::_OutputArray(cv::_OutputArray *, cv::Mat &) (isz = 13) (sz = 20)
    -> INLINE (MANUAL): /usr/local/include/opencv2/core/mat.inl.hpp:(143,22) cv::_InputArray::_InputArray(cv::_InputArray *const) (isz = 9) (sz = 14)
      -> INLINE (MANUAL): (69,21) cv::_InputArray::_InputArray(cv::_InputArray *) (isz = 9) (sz = 14)
        -> INLINE (MANUAL): (69,21) cv::Size_<int>::Size_(cv::Size_<int> *) (isz = 2) (sz = 7)
        -> INLINE (MANUAL): (69,37) cv::_InputArray::init(cv::_InputArray *, int, const void *) (isz = 1) (sz = 9)
    -> INLINE (MANUAL): /usr/local/include/opencv2/core/mat.inl.hpp:(143,45) cv::_InputArray::init(cv::_InputArray *, int, const void *) (isz = 1) (sz = 9)
  -> INLINE (MANUAL): (349,17) cv::_InputArray::_InputArray(cv::_InputArray *, const cv::Mat &) (isz = 8) (sz = 15)
    -> INLINE (MANUAL): /usr/local/include/opencv2/core/mat.inl.hpp:(71,21) cv::Size_<int>::Size_(cv::Size_<int> *) (isz = 2) (sz = 7)
    -> INLINE (MANUAL): /usr/local/include/opencv2/core/mat.inl.hpp:(71,49) cv::_InputArray::init(cv::_InputArray *, int, const void *) (isz = 1) (sz = 9)
  -> INLINE (MANUAL): (349,40) cv::Size_<int>::Size_(cv::Size_<int> *, int, int) (isz = 1) (sz = 9)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/local/include/opencv2/core/mat.inl.hpp(339,6) inlined into helpers.cpp(347,42)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference __p1[_2] has unaligned access
   remark #15388: vectorization support: reference at (339:6) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/local/include/opencv2/core/mat.inl.hpp(339,6) inlined into helpers.cpp(347,42)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference *(__p1+_2*8+16) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 1.280 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /usr/local/include/opencv2/core/mat.inl.hpp(339,6) inlined into helpers.cpp(347,42)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

helpers.cpp(346,1):remark #34051: REGISTER ALLOCATION : [_Z12gaussianBlurN2cv3MatEf] helpers.cpp:346

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rsi rdi r8-r11 r14-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :      67
            Global    :      19
            Local     :      48
        Regenerable   :      16
        Spilled       :       3
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       1 [0.00e+00 ~ 0.0%]
            Writes    :      13 [1.10e+01 ~ 3.0%]
        Spills        :       8 bytes*
            Reads     :       1 [4.93e-01 ~ 0.1%]
            Writes    :       1 [4.93e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: gaussianBlurInplace(cv::Mat &, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (gaussianBlurInplace(cv::Mat &, float)) [16/43=37.2%] helpers.cpp(354,1)
  -> EXTERN: (356,4) cv::GaussianBlur(cv::InputArray, cv::OutputArray, cv::Size *, double, double, int)
  -> INLINE (MANUAL): (356,17) cv::_InputArray::_InputArray(cv::_InputArray *, const cv::Mat &) (isz = 8) (sz = 15)
    -> INLINE (MANUAL): /usr/local/include/opencv2/core/mat.inl.hpp:(71,21) cv::Size_<int>::Size_(cv::Size_<int> *) (isz = 2) (sz = 7)
    -> INLINE (MANUAL): /usr/local/include/opencv2/core/mat.inl.hpp:(71,49) cv::_InputArray::init(cv::_InputArray *, int, const void *) (isz = 1) (sz = 9)
  -> INLINE (MANUAL): (356,26) cv::_OutputArray::_OutputArray(cv::_OutputArray *, cv::Mat &) (isz = 13) (sz = 20)
    -> INLINE (MANUAL): /usr/local/include/opencv2/core/mat.inl.hpp:(143,22) cv::_InputArray::_InputArray(cv::_InputArray *const) (isz = 9) (sz = 14)
      -> INLINE (MANUAL): (69,21) cv::_InputArray::_InputArray(cv::_InputArray *) (isz = 9) (sz = 14)
        -> INLINE (MANUAL): (69,21) cv::Size_<int>::Size_(cv::Size_<int> *) (isz = 2) (sz = 7)
        -> INLINE (MANUAL): (69,37) cv::_InputArray::init(cv::_InputArray *, int, const void *) (isz = 1) (sz = 9)
    -> INLINE (MANUAL): /usr/local/include/opencv2/core/mat.inl.hpp:(143,45) cv::_InputArray::init(cv::_InputArray *, int, const void *) (isz = 1) (sz = 9)
  -> INLINE (MANUAL): (356,46) cv::Size_<int>::Size_(cv::Size_<int> *, int, int) (isz = 1) (sz = 9)


    Report from: Code generation optimizations [cg]

helpers.cpp(354,1):remark #34051: REGISTER ALLOCATION : [_Z19gaussianBlurInplaceRN2cv3MatEf] helpers.cpp:354

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi zmm0-zmm2]
        
    Routine temporaries
        Total         :      29
            Global    :      10
            Local     :      19
        Regenerable   :       9
        Spilled       :       0
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      10 [1.00e+01 ~ 23.3%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: doubleImage(cv::Mat *, const cv::Mat &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (doubleImage(cv::Mat *, const cv::Mat &)) [17/43=39.5%] helpers.cpp(360,1)
  -> INLINE (MANUAL): (361,44) cv::Mat::Mat(cv::Mat *, int, int, int) (isz = 69) (sz = 80)
    -> INLINE (MANUAL): /usr/local/include/opencv2/core/mat.inl.hpp:(339,6) cv::MatStep::MatStep(cv::MatStep *) (isz = 10) (sz = 15)
    -> INLINE (MANUAL): /usr/local/include/opencv2/core/mat.inl.hpp:(341,47) cv::MatSize::MatSize(cv::MatSize *, int *) (isz = 0) (sz = 6)
    -> INLINE (MANUAL): /usr/local/include/opencv2/core/mat.inl.hpp:(343,5) cv::Mat::create(cv::Mat *, int, int, int) (isz = 28) (sz = 40)
      -> INLINE (MANUAL): (681,56) cv::Mat::type(const cv::Mat *) const (isz = 1) (sz = 7)
      -> EXTERN: (684,5) cv::Mat::create(cv::Mat *, int, const int *, int)
  -> INLINE (MANUAL): (361,44) cv::Mat::type(const cv::Mat *) const (isz = 1) (sz = 7)
  -> INLINE (MANUAL): (362,28) cv::Mat::ptr<float>(const cv::Mat *, int) const (isz = 3) (sz = 11)
  -> INLINE (MANUAL): (369,12) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (370,12) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (370,51) cv::MatStep::operator size_t(const cv::MatStep *) const (isz = 1) (sz = 7)
  -> INLINE (MANUAL): (371,12) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (372,12) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (372,57) cv::MatStep::operator size_t(const cv::MatStep *) const (isz = 1) (sz = 7)
  -> INLINE (MANUAL): (372,72) cv::MatStep::operator size_t(const cv::MatStep *) const (isz = 1) (sz = 7)
  -> INLINE (MANUAL): (379,9) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (379,36) cv::Mat::at<float>(const cv::Mat *, int, int) const (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (380,9) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (380,42) cv::Mat::at<float>(const cv::Mat *, int, int) const (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (380,76) cv::Mat::at<float>(const cv::Mat *, int, int) const (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (386,9) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (386,36) cv::Mat::at<float>(const cv::Mat *, int, int) const (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (387,9) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (387,42) cv::Mat::at<float>(const cv::Mat *, int, int) const (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (387,76) cv::Mat::at<float>(const cv::Mat *, int, int) const (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (389,6) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)
  -> INLINE (MANUAL): (389,40) cv::Mat::at<float>(cv::Mat *, int, int) (isz = 4) (sz = 14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/local/include/opencv2/core/mat.inl.hpp(339,6) inlined into helpers.cpp(361,44)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference __p1[_2] has unaligned access
   remark #15388: vectorization support: reference at (339:6) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/local/include/opencv2/core/mat.inl.hpp(339,6) inlined into helpers.cpp(361,44)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference *(__p1+_2*8+16) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 1.280 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /usr/local/include/opencv2/core/mat.inl.hpp(339,6) inlined into helpers.cpp(361,44)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at helpers.cpp(364,4)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between (__p1->data+*__p1->p*r2)[c2] (369:12) and (__p1->data+*__p1->p*(r2+1))[c2+1] (372:12)
   remark #17106: parallel dependence: assumed OUTPUT dependence between (__p1->data+*__p1->p*(r2+1))[c2+1] (372:12) and (__p1->data+*__p1->p*r2)[c2] (369:12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between (__p1->data+*__p1->p*r2)[c2] (369:12) and (__p1->data+*__p1->p*(r2+1))[c2+1] (372:12)
   remark #15346: vector dependence: assumed OUTPUT dependence between (__p1->data+*__p1->p*(r2+1))[c2+1] (372:12) and (__p1->data+*__p1->p*r2)[c2] (369:12)

   LOOP BEGIN at helpers.cpp(365,7)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between (__p1->data+*__p1->p*r2)[c2] (369:12) and (__p1->data+*__p1->p*(r2+1))[c2+1] (372:12)
      remark #17106: parallel dependence: assumed OUTPUT dependence between (__p1->data+*__p1->p*(r2+1))[c2+1] (372:12) and (__p1->data+*__p1->p*r2)[c2] (369:12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between (__p1->data+*__p1->p*r2)[c2] (369:12) and (__p1->data+*__p1->p*(r2+1))[c2+1] (372:12)
      remark #15346: vector dependence: assumed OUTPUT dependence between (__p1->data+*__p1->p*(r2+1))[c2+1] (372:12) and (__p1->data+*__p1->p*r2)[c2] (369:12)
   LOOP END
LOOP END

LOOP BEGIN at helpers.cpp(375,4)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between (__p1->data+*__p1->p*r2)[c2] (379:9) and (__p1->data+*__p1->p*(r2+1))[c2] (380:9)
   remark #17106: parallel dependence: assumed OUTPUT dependence between (__p1->data+*__p1->p*(r2+1))[c2] (380:9) and (__p1->data+*__p1->p*r2)[c2] (379:9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between (__p1->data+*__p1->p*r2)[c2] (379:9) and (__p1->data+*__p1->p*(r2+1))[c2] (380:9)
   remark #15346: vector dependence: assumed OUTPUT dependence between (__p1->data+*__p1->p*(r2+1))[c2] (380:9) and (__p1->data+*__p1->p*r2)[c2] (379:9)
LOOP END

LOOP BEGIN at helpers.cpp(382,4)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between (__p1->data+*__p1->p*r2)[c2] (386:9) and (in+*input->p*(input->rows-1))[c] (387:9)
   remark #17106: parallel dependence: assumed ANTI dependence between (in+*input->p*(input->rows-1))[c] (387:9) and (__p1->data+*__p1->p*r2)[c2] (386:9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between (__p1->data+*__p1->p*r2)[c2] (386:9) and (in+*input->p*(input->rows-1))[c] (387:9)
   remark #15346: vector dependence: assumed ANTI dependence between (in+*input->p*(input->rows-1))[c] (387:9) and (__p1->data+*__p1->p*r2)[c2] (386:9)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at helpers.cpp(382,4)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

helpers.cpp(360,1):remark #34051: REGISTER ALLOCATION : [_Z11doubleImageRKN2cv3MatE] helpers.cpp:360

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :     143
            Global    :      55
            Local     :      88
        Regenerable   :      10
        Spilled       :      18
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [9.85e-01 ~ 0.1%]
        Spills        :      96 bytes*
            Reads     :      26 [2.61e+01 ~ 2.2%]
            Writes    :      22 [2.70e+01 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: halfImage(cv::Mat *, const cv::Mat &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (halfImage(cv::Mat *, const cv::Mat &)) [18/43=41.9%] helpers.cpp(394,1)
  -> INLINE (MANUAL): (395,44) cv::Mat::Mat(cv::Mat *, int, int, int) (isz = 69) (sz = 80)
    -> INLINE (MANUAL): /usr/local/include/opencv2/core/mat.inl.hpp:(339,6) cv::MatStep::MatStep(cv::MatStep *) (isz = 10) (sz = 15)
    -> INLINE (MANUAL): /usr/local/include/opencv2/core/mat.inl.hpp:(341,47) cv::MatSize::MatSize(cv::MatSize *, int *) (isz = 0) (sz = 6)
    -> INLINE (MANUAL): /usr/local/include/opencv2/core/mat.inl.hpp:(343,5) cv::Mat::create(cv::Mat *, int, int, int) (isz = 28) (sz = 40)
      -> INLINE (MANUAL): (681,56) cv::Mat::type(const cv::Mat *) const (isz = 1) (sz = 7)
      -> EXTERN: (684,5) cv::Mat::create(cv::Mat *, int, const int *, int)
  -> INLINE (MANUAL): (395,44) cv::Mat::type(const cv::Mat *) const (isz = 1) (sz = 7)
  -> INLINE (MANUAL): (396,19) cv::Mat::ptr<float>(cv::Mat *, int) (isz = 3) (sz = 11)
  -> INLINE (MANUAL): (399,25) cv::Mat::at<float>(const cv::Mat *, int, int) const (isz = 4) (sz = 14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/local/include/opencv2/core/mat.inl.hpp(339,6) inlined into helpers.cpp(395,44)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference __p1[_2] has unaligned access
   remark #15388: vectorization support: reference at (339:6) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/local/include/opencv2/core/mat.inl.hpp(339,6) inlined into helpers.cpp(395,44)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference *(__p1+_2*8+16) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 1.280 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /usr/local/include/opencv2/core/mat.inl.hpp(339,6) inlined into helpers.cpp(395,44)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at helpers.cpp(397,4)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between *out (399:11) and *out (399:11)
   remark #17106: parallel dependence: assumed OUTPUT dependence between *out (399:11) and *out (399:11)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at helpers.cpp(398,7)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=15
   LOOP END

   LOOP BEGIN at helpers.cpp(398,7)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between out (399:11) and out (399:11)
      remark #17106: parallel dependence: assumed FLOW dependence between out (399:11) and out (399:11)
      remark #17106: parallel dependence: assumed ANTI dependence between out (399:11) and out (399:11)
      remark #15389: vectorization support: reference *out has unaligned access   [ helpers.cpp(399,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15415: vectorization support: non-unit strided load was generated for the variable <(input->data+*input->p*ri)[ci]>, stride is 2   [ helpers.cpp(399,25) ]
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.239
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 2.870 
      remark #15478: estimated potential speedup: 1.660 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at helpers.cpp(398,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

helpers.cpp(394,1):remark #34051: REGISTER ALLOCATION : [_Z9halfImageRKN2cv3MatE] helpers.cpp:394

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :      86
            Global    :      34
            Local     :      52
        Regenerable   :      12
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [9.85e-01 ~ 0.1%]
        Spills        :      16 bytes*
            Reads     :       2 [1.80e+00 ~ 0.1%]
            Writes    :       2 [1.80e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: cv::Size_<int>::Size_(cv::Size_<int> *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::Size_<int>::Size_(cv::Size_<int> *)) /usr/local/include/opencv2/core/types.hpp(1565,27)

===========================================================================

Begin optimization report for: cv::Size_<int>::Size_(cv::Size_<int> *, int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::Size_<int>::Size_(cv::Size_<int> *, int, int)) /usr/local/include/opencv2/core/types.hpp(1569,38)

===========================================================================

Begin optimization report for: cv::_InputArray::_InputArray(cv::_InputArray *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::_InputArray::_InputArray(cv::_InputArray *)) /usr/local/include/opencv2/core/mat.inl.hpp(69,35)

===========================================================================

Begin optimization report for: cv::_InputArray::_InputArray(cv::_InputArray *const)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::_InputArray::_InputArray(cv::_InputArray *const)) /usr/local/include/opencv2/core/mat.inl.hpp(69,21)

===========================================================================

Begin optimization report for: cv::_InputArray::_InputArray(cv::_InputArray *, const cv::Mat &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::_InputArray::_InputArray(cv::_InputArray *, const cv::Mat &)) /usr/local/include/opencv2/core/mat.inl.hpp(71,47)

===========================================================================

Begin optimization report for: cv::_InputArray::init(cv::_InputArray *, int, const void *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::_InputArray::init(cv::_InputArray *, int, const void *)) /usr/local/include/opencv2/core/mat.inl.hpp(60,1)

===========================================================================

Begin optimization report for: cv::_OutputArray::_OutputArray(cv::_OutputArray *, cv::Mat &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::_OutputArray::_OutputArray(cv::_OutputArray *, cv::Mat &)) /usr/local/include/opencv2/core/mat.inl.hpp(143,43)

===========================================================================

Begin optimization report for: cv::MatSize::MatSize(cv::MatSize *, int *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::MatSize::MatSize(cv::MatSize *, int *)) /usr/local/include/opencv2/core/mat.inl.hpp(1246,13)

===========================================================================

Begin optimization report for: cv::MatStep::MatStep(cv::MatStep *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::MatStep::MatStep(cv::MatStep *)) /usr/local/include/opencv2/core/mat.inl.hpp(1301,1)

===========================================================================

Begin optimization report for: cv::MatStep::operator size_t(const cv::MatStep *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::MatStep::operator size_t(const cv::MatStep *) const) /usr/local/include/opencv2/core/mat.inl.hpp(1324,1)

===========================================================================

Begin optimization report for: cv::Mat::Mat(cv::Mat *, int, int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::Mat::Mat(cv::Mat *, int, int, int)) /usr/local/include/opencv2/core/mat.inl.hpp(342,1)

===========================================================================

Begin optimization report for: cv::Mat::create(cv::Mat *, int, int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::Mat::create(cv::Mat *, int, int, int)) /usr/local/include/opencv2/core/mat.inl.hpp(679,1)

===========================================================================

Begin optimization report for: cv::Mat::release(cv::Mat *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::Mat::release(cv::Mat *)) /usr/local/include/opencv2/core/mat.inl.hpp(702,1)

===========================================================================

Begin optimization report for: cv::Mat::type(const cv::Mat *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::Mat::type(const cv::Mat *) const) /usr/local/include/opencv2/core/mat.inl.hpp(771,1)

===========================================================================

Begin optimization report for: cv::Mat::at<float>(cv::Mat *, int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::Mat::at<float>(cv::Mat *, int, int)) /usr/local/include/opencv2/core/mat.inl.hpp(952,1)

===========================================================================

Begin optimization report for: cv::Mat::ptr<float>(cv::Mat *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::Mat::ptr<float>(cv::Mat *, int)) /usr/local/include/opencv2/core/mat.inl.hpp(826,1)

===========================================================================

Begin optimization report for: cv::Mat::at<float>(const cv::Mat *, int, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::Mat::at<float>(const cv::Mat *, int, int) const) /usr/local/include/opencv2/core/mat.inl.hpp(963,1)

===========================================================================

Begin optimization report for: cv::Mat::ptr<float>(const cv::Mat *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (cv::Mat::ptr<float>(const cv::Mat *, int) const) /usr/local/include/opencv2/core/mat.inl.hpp(833,1)

===========================================================================

Begin optimization report for: std::abs(double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::abs(double)) /usr/include/c++/5/cmath(82,3)

===========================================================================

Begin optimization report for: std::abs(float)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::abs(float)) /usr/include/c++/5/cmath(88,3)

===========================================================================

Begin optimization report for: std::ceil(float)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::ceil(float)) /usr/include/c++/5/cmath(185,3)

===========================================================================

Begin optimization report for: std::exp(float)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::exp(float)) /usr/include/c++/5/cmath(242,3)

===========================================================================

Begin optimization report for: std::floor(float)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::floor(float)) /usr/include/c++/5/cmath(280,3)

===========================================================================

Begin optimization report for: std::sqrt(float)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::sqrt(float)) /usr/include/c++/5/cmath(483,3)

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [43/43=100.0%] <compiler generated>
  -> EXTERN: /usr/include/c++/5/iostream:(74,25) __cxa_atexit()
  -> EXTERN: /usr/include/c++/5/iostream:(74,25) std::ios_base::Init::Init(std::ios_base::Init *)


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> Inlining the function will lead to incorrect program behavior.

